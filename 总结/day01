一.SpringDataJpa准备
    Spring集成JPA
    引入了一个 data.jpa 的头
        <jpa:repositories base-package="cn.itsource.aisell.repository"
            entity-manager-factory-ref="entityManagerFactory"
                          transaction-manager-ref="transactionManager"
        ></jpa:repositories>
    接口中继承JpaRepository
         interface EmployeeRepository extends JpaRepository<Employee,Long>
     JPA的实现对象中，怎么搞一个父类出来？
        @MappedSuperclass
        public class BaseDomain {
            。。。
        }
    增删改查就已经完成了

二.SpringDataJpa使用
    默认使用了一个SimpleJpaRepository的子类(运行后自动创建)来使用相应的功能
    2.1 基本功能
        repository.findAll(..);
        repository.save(..);
        repository.delete(..)
        repository.getOne(..)/findOne(); ->getOne会拿代理对象
        分页排序
             分页对象 = new PageRequest(0,4,Sort)
             repository.findAll(分页对象);
    2.3 高级查询
        根据名称规则:findByUsernameLike /findByUsernameAndPassword
        根据Query注解
            @Query("jpql语句 where username =?1/:username")

三.JpaSpecificationExecutor(JPA规则执行者)
      // findAll(new Specification...) -> 查询的时候按照某一个规则来
      // Predicate toPredicate(..) -> 自动定义并返回规则
      // root:获取字段   criteriaQuery:连接条件  criteriaBuilder:字符关系(>,<,=,like,...)
      List<Employee> list = employeeRepository.findAll(new Specification<Employee>() {
                  @Override
                  public Predicate toPredicate(Root<Employee> root, CriteriaQuery<?> criteriaQuery, CriteriaBuilder criteriaBuilder) {
                      //1.拿到用户名字段
                      Path usernamePath = root.get("username");
                      //2.确定条件
                      Predicate p = criteriaBuilder.like(usernamePath, "%1%");
                      //3.返回规则
                      return p;
                  }
              });
        jpa-spec:
            1:是否过滤  2.过滤的字段名  3.对应的值
            Specification<Employee> spec = Specifications.<Employee>and()
                            .like(StringUtils.isNotBlank(username), "username", "%" + username + "%")
                            .like(StringUtils.isNotBlank(email), "email", "%" + email + "%")
                            .lt(age != null, "age", age)
                            .build();

四.Query抽取
    为什么父类:公共代码(少写代码)，制定规范(实际上多人开发感受到优势)
    BaseQuery{
        currentPage(当前页),pageSize(每页条数),sortName(排序名称),sortType(排序类型)
        getJpaPage{ return currentPage-1}; //用户是从1开始计算,JPA从0开始
        public abstract Specification createSpec(); //子类必需要实现这个方法
        createSort(){
            1.根据排序名称确定是否需要排序
            2.类型判断请转成相应的大写(小写)
        }
    }
    EmployeeQuery extends BaseQuery{
        username,email,age
         public abstract Specification createSpec(){
             根据 jpa-spec 完成返回
         }
    }






